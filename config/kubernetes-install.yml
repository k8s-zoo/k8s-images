---

- name: Ansible playbook for Kubernetes master running tasks on the localhost
  hosts: 127.0.0.1
  connection: local
  become: true

  tasks:
    # Install Docker and its dependent components.
    - name: Install packages that allow apt to be used over HTTPS
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - python3-pip

    - name: Add an apt signing key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add apt repository for stable version
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
        state: present

    - name: Install docker and its dependecies
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
      notify:
        - docker status

    - name: Add ubunter user to docker group
      user:
        name: ubunte
        group: docker

    # Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code.
    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    # Installing kubelet, kubeadm and kubectl using the below code.
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl
          - kubernetes-cni

    # Initialize the Kubernetes cluster with kubeadm using the below code
    #- name: Initialize the Kubernetes cluster using kubeadm
    #  command: kubeadm init

    # Setup the AWS networking provider and the network policy engine using the below code.
    # https://github.com/aws/amazon-vpc-cni-k8s
#    - name: Install AWS pod network
#      become: false
#      command: kubectl apply -f aws-k8s-cni.yaml

#    - name: Generate join command
#      command: kubeadm token create --print-join-command
#      register: join_command
#
#    # Generate kube join command for joining the node to the Kubernetes cluster and store the command in the file named `join-command.sh`
#    - name: Copy join command to local file
#      local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command.sh"
#
#    - name: Create aws parameter store for kubernates joing command
#      aws_ssm_parameter_store:
#        name: "k8s-node-token"
#        description: "Kubernetes join command"
#        string_type: "SecureString"
#        overwrite_value: "always"
#        value: "{{ lookup('file', './join-command.sh') }}"

  # Setup a handler for checking Docker daemon using the below code.
  handlers:
    - name: docker status
      service: name=docker state=started